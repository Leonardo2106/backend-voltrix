"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os, re
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_MODEL = os.getenv('GEMINI_MODEL', 'gemini-robotics-er-1.5-preview')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.getenv(
    'ALLOWED_HOSTS',
).split(',')

SITE_ID = 1


# Application definition

INSTALLED_APPS = [
    'allauth',
    'corsheaders',
    'rest_framework',
    'allauth.account',
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.sites',
    'allauth.socialaccount',
    'django.contrib.sessions',
    'django.contrib.messages',
    'rest_framework_simplejwt',
    'django.contrib.staticfiles',
    'django.contrib.contenttypes',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'apps.auth.apps.AuthConfig',
    'apps.tapo.apps.TapoConfig',
    'apps.chatbot.apps.ChatbotConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
] # hosts confiáveis

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'https://backend-voltrix.onrender.com'
] # hosts confiáveis

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SAMESITE = "None"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'apps.auth.authentication.CookiesOrHeaderJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ]
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')
if not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET:
    raise RuntimeError("Defina GOOGLE_CLIENT_ID e GOOGLE_CLIENT_SECRET no .env")

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
            'key': ''
        }
    }
}

# GITHUB_CLIENT_ID = os.getenv('GITHUB_CLIENT_ID')
# GITHUB_CLIENT_SECRET = os.getenv('GITHUB_CLIENT_SECRET')
# if not GITHUB_CLIENT_ID or not GITHUB_CLIENT_SECRET:
#     raise RuntimeError("Defina GITHUB_CLIENT_ID e GITHUB_CLIENT_SECRET no .env")

# SOCIALACCOUNT_PROVIDERS = {
#     'github': {
#         'APP': {
#             'client_id': GITHUB_CLIENT_ID,
#             'secret': GITHUB_CLIENT_SECRET,
#             'key': ''
#         }
#     }
# }

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

_raw_db = os.getenv("DATABASE_URL", "").strip()

def _sanitize_db_url(url: str) -> str | None:
    if not url:
        return None
    if "://" not in url or url.startswith("://"):
        return None
    url = re.sub(r'^postgres(ql)?\+psycopg2://', 'postgresql://', url, flags=re.I)
    url = re.sub(r'^mysql\+\w+://', 'mysql://', url, flags=re.I)
    return url

_db = _sanitize_db_url(_raw_db)

def _sqlite_fallback():
    return {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

if _db:
    try:
        ssl_req = _db.lower().startswith(("postgres://", "postgresql://", "redshift://"))
        DATABASES = {
            "default": dj_database_url.parse(
                _db,
                conn_max_age=600,
                ssl_require=ssl_req,
            )
        }
    except Exception:
        DATABASES = _sqlite_fallback()
else:
    DATABASES = _sqlite_fallback()

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Allauth conditions

LOGIN_REDIRECT_URL = 'http://localhost:5173/'

SOCIALACCOUNT_LOGIN_ON_GET = True

ACCOUNT_LOGOUT_ON_GET = True

LOGOUT_REDIRECT_URL = 'http://localhost:5173/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Caches (default: 60)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'chatbot-cache',
        'TIMEOUT': 60,
    }
}